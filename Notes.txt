$$$1. Comments in JSX.
Example:
<p>
  {/* test */}
</p>

$$$2. Question: why we need to put $(document).foundation() in componentDidMount to make some Foundation components to work?
Answer: Foundation need to initialize component with jquery when document is ready,
jquery does the job here of hiding and showing the dropdown menu,
for dropdown menu it should also possible to call $(document).foundation from $(document).ready(function(){});
difference is that ready is called only once, componentDidMount is called always after render method

$$$3. Use <Link/> when you're linking to a route defined with <Route/>.
Use <IndexLink/> When you're linking to a route defined with <IndexRoute/>

$$$4. Webpack is only going to rerun when files used in the bundle change.
This means that not every file change will result in a new bundle.
For example, imagine you add a new component file and setup a basic React component.
Changes to this file will not result in a new bundle.
You'll need to require this file in the app to have webpack watch it for changes.

$$$5. SCSS file starting with '_' means that file is partial and needs to be imported to use.

$$$6. Question: what is difference between .top-bar ul and .top-bar > ul ?
.top-bar ul:
This is going to select any ul elements nested inside of any element with a class of top-bar.
This is not just for children, it could be a grandchild or some other nested item.
The below codes are equal:
#1:
.top-bar {
  ul {
    background-color: $nav-background;
  }
}

#2:
.top-bar ul {
    background-color: $nav-background;
}

.top-bar > ul:
This selector is going to select all ul elements that are direct children of an element with a class of top-bar.
A deeply nested ul element would not get styles in this case.

$$$7. What's the difference between assertion library, testing framework and testing environment in JavaScript?
In general, it's best to keep libraries small and specific.
Chai is an assertion library.
Mocha is a testing framework.
and Karma is a testing environment.

In the case of expect, it's only job is assertions.
Karma is responsible for running the tests.
Mocha is the framework that lets you create individual test cases and test suites using describe(), it(), beforeEach(), etc.

Much older versions of did include an assertion library.
In recent years it's been pulled out to give the developer more flexibility over which assertion library they'd like to use.

$$$8. Remember, you'll only be able to run webpack from the command line
if you install it globally with "npm install -g webpack@1.14.0"

$$$9. When you run "npm test" command, it will need to run webpack before it can run your test in the browser,
the terminal displays all the files that webpack has bundled and than it shows the results of your test.
This output should have been suppressed when we added the following option to the karma configuration file:

webpackServer: {
  noInfo: true
}

$$$10. How _topNav.scss are able to retrieve the variable from _variable.scss?
All the files that are imported into app.scss are essentially copy-and-pasted in the order that they are imported in.
That means that all variables are available in all the imported files since the _variables.scss is imported first.

$$$11. CSS3 Flexbox
Flexible boxes, or flexbox, is a new layout mode in CSS3.
Use of flexbox ensures that elements behave predictably when the page layout must
accommodate different screen sizes and different display devices.
For many applications, the flexible box model provides an improvement
over the block model in that it does not use floats,
nor do the flex container's margins collapse with the margins of its contents.

A Complete Guide to Flexbox:
https://css-tricks.com/snippets/css/a-guide-to-flexbox/

$$$12. If you want to learn regular expression,
http://regexr.com/ is a great reference and cheatsheet.
You can input regular express and highlight each symbol to see what they mean.

Some improvement on the regular expression wrote by Andrew:
The * matches zero or more occurrences, whereas the + matches one or more occurrences.
In this way the empty string will not pass the test.
Also, instead of the match() method we can also use the test() method.

if ( /^[0-9]+$/.test(some string) ) {
  // statements
}

$$$13. componentDidUpdate is a life cycle method which is called everytime props / state is updated.
componentDidUpdate: function(previousProps, previousState) {
  ...
}

$$$14. Benefits of testing:
Testing lets you make sure that you're not breaking features when adding new ones.
It's also fantastic for testing those edge cases you forget about when using the app in the browser.

$$$15. The {} allows for a JSX expression which is not part of your normal HTML setup.
You can still pass in a prop using propName="something" where "something"
will get passed in as a static string. Using that syntax you can only pass down strings.

{} allows you to pass in anything you like. Numbers, booleans, functions, etc.
You can also reference variables so you don't have to pass down static props like you do with quotes.
You can run any javascript you like inside of a JSX expression!

$$$16. Currying refers to the process of transforming a function with
multiple arity into the same function with less arity.
The curried effect is achieved by binding some of the arguments to the first function invoke,
so that those values are fixed for the next invocation.
Hereâ€™s an example of what a curried function looks like:

var babyAnimals = function(a) {
  return function(b) {
    var result = 'I love '.concat(a).concat(' and ').concat(b);
    return result;
  }
}

var babyKoala = babyAnimals('koalas');

babyKoala('elephants');     // 'I love koalas and elephants'
babyKoala('flamingos');     // 'I love koalas and flamingos'
babyKoala('axolotls');      // 'I love koalas and axolotls'

https://www.sitepoint.com/currying-in-functional-javascript/

$$$17. Question:
In Lecture 78 @2:52, below code:

<button onClick={this.onStatusChange('paused')}>Pause</button>

onStatusChange: function(newStatus) {
  return () => {
    this.props.onStatusChange(newStatus);
  }
}

why we cant just call this:

onStatusChange: function(newStatus) {
  this.props.onStatusChange(newStatus);
}

Answer:
The difference is this.
The first solution returns a function that knows how to update the status.
It's return value (the arrow function) is what gets stored as the actual callback function for the event.
It's gets passed to onClick and the generated function gets called when the button is clicked.

The second solution calls this.props.onStatusChange right away, not when the button gets clicked.
(It will be executed once the button is rendered.)
The onClick value is going to be undefined which is the default return value for onStatusChange.
That's a problem.

The first solution is useful because we've created a function generator.
We can generate 3 different functions for our 3 statuses.
Since we have multiple statuses we can use the first solution to generate a function for each.
The alternative would be creating 3 separate functions for each status.

Here's a JSX snippet that would work for the second solution:

<button className="button secondary" onClick={() => {
    this.onStatusChange('paused');
}}></button>

You can simply that further like this:

<button className="button secondary" onClick={() => this.onStatusChange('paused')}></button>

$$$18. Arrow function and this keyword:
// This won't work (arrow functions)
var obj1 = {
  name: 'Andrew',
  printName: () => {
    console.log(this.name); // Will print undefined
  }
};
obj1.printName();


// This will work (ES5)
var obj2 = {
  name: 'Andrew',
  printName: function () {
    console.log(this.name); // Will print Andrew
  }
};
obj2.printName();


// This will work (ES6 method definition syntax)
var obj3 = {
  name: 'Andrew',
  printName () {
    console.log(this.name); // Will print Andrew
  }
};
obj3.printName();

$$$19. There are two main paths for adding fonts.
First would be simply adding a link tag to the head of your html document.
That's the method you should use since Google Fonts only provides you with a url.
It's totally fine that it's not part of webpack since it's not a file.

If you did have a set of font files, then you would want to use webpack.
That would be the case if you were using a font icon or if you had a custom font with font files you wanted to include.
